I - BASE
I.1 - Demmarer
pour commencer un fichier git par raport a un git dont ladresse est <@git>
NB: >>> represente le prompt
plusieur possibilité :

1 solution/
#creer le dossier pour mettre les fichier git
>>>mkdir <nom_dossier>

#aller dans ce dossier
>>>cd <nom_dossier>

#initialiser le git
>>>git init

#ajout de la remote origin
>>>git remote add origin <@git>

#recupérer les fichier (le nom de branche pricipale est master)
>>>git pull origin <nom_branche>

2 eme solution/

#cloner le dossier git
>>>git clone <@git>

#aller dans ce dossier
>>>cd <nom_dossier>


I.2 - commande git de base

#avoir le manuel d'utilisation d'une commande git <nom_comande>
>>>git help <nom_comande>

#voir nom de remote
>>>git remote-v

#voir ou vous en êtes au niveau des fichier ajouté au prochain commit, crée ou modifié sans avoir ete ajouté
>>>git status

#revenir a l'etat initial de la head '*' veux dire tout si vous souhaité remetre juste des .c par ex mettez '*.c'
>>>git checkout -- '*'

# recupérer code sur la branche <n_b> du git
>>>git pull <nom_remote> <n_b>

#ajout d'un fichier(on moficication) pour le prochain commit
>>>git add <nom de fichier>

#possiblité de faire git add -u pour rajouter les modification de tous les fichier present dans le git

#crée un commit
>>>git commit -m "la description breve de ce que vous avez fait"

#sans le -m vous ouvre votre editeur pour ecrire une description plus longue

#envoi vos commit sur le git
>>>git push [<nom_remote>][<nom_branch>]

# les partie en [] sont obligatoir pour le premier push apres le git sera que vous voulez push avec <nom_remote> sur la branche <nom_branch>



============================================================================================================================================
============================================================================================================================================
============================================================================================================================================


II - les problemes

II.1 les merge
#de temps en temps vous pouvez avoir des erreur du au fait qu'un fichier a ete modifier de votre coté et sur le git

#dans le fichier corespondant vous aurez ceci dans l'endroi modifier par les deux coté

<<<<<<< HEAD
ceci est le message deja sur le git
=======
ceci est le message que vous voulez rajouter a la même position
>>>>>>> nom du commit

#choisissez ce que vous gardez enlevez les <<<..., === et les >>>>...

#ajout du ou des fichier coriger (ex pour 2 fichier)
git add <fichier> <fichier2>

#apres faite git status pour voir si tous les probleme sont gerer
>>>git status
rebasage en cours ; sur 66582ce
Vous êtes en train de rebaser la branche 'master' sur '66582ce'.
  (tous les conflits sont réglés : lancez "git rebase --continue")

rien à valider, la copie de travail est propre

#sit tous est fini vous n'avez plus qu'a finit le merge
>>>git rebase --continue


#si vous avez fait un commit du merge vous aurez ce message
 Application de  creation d'une erreur de merge
 Aucun changement - avez-vous oublié d'utiliser 'git add' ?
 S'il n'y a plus rien à indexer, il se peut qu'autre chose ait déjà
 introduit les mêmes changements ; vous pourriez avoir envie de sauter ce patch.

Lorsque vous aurez résolu ce problème, lancez "git rebase --continue".
Si vous préférez sauter ce patch, lancez "git rebase --skip" à la place.
Pour extraire la branche d'origine et stopper le rebasage, lancez "git rebase --abort".

# passez
>>>git rebase --skip


============================================================================================================================================
============================================================================================================================================
============================================================================================================================================

III - les branche

#lister les branche
>>>git branch -v
dev    77f6c0a update tuto
* master 77f6c0a update tuto



#il y a 2 branche est vous êtes sur la branche master

#creer une branch
>>>git branch <nom_branch>

#detruire une branch
>>>git branch -d dev
Branche dev supprimée (précédemment 77f6c0a)

#pour aller sur une autre branche
>>>git checkout <nom_branche>


#ajout de la branche <ici> où vous êtes a la branche <nom_branche>
>>>git checkout <nom_branche>
>>>git merge <ici>
#si <ici> ne sera plus utilisé
git branch -d <ici>
